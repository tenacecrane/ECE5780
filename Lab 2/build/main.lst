ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.EXTI0_1_IRQHandler,"ax",%progbits
  19              		.align	1
  20              		.global	EXTI0_1_IRQHandler
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	EXTI0_1_IRQHandler:
  26              	.LFB40:
   1:Src/main.c    **** /**
   2:Src/main.c    ****  *
   3:Src/main.c    ****  * Tenace Crane
   4:Src/main.c    ****  * U0986849
   5:Src/main.c    ****  *
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  * File Name          : main.c
   8:Src/main.c    ****  * Description        : Main program body
   9:Src/main.c    ****  ******************************************************************************
  10:Src/main.c    ****  ** This notice applies to any and all portions of this file
  11:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
  12:Src/main.c    ****  * USER CODE END. Other portions of this file, whether
  13:Src/main.c    ****  * inserted by the user or by software development tools
  14:Src/main.c    ****  * are owned by their respective copyright owners.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  17:Src/main.c    ****  *
  18:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  19:Src/main.c    ****  * are permitted provided that the following conditions are met:
  20:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  21:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  22:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  23:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  24:Src/main.c    ****  *      and/or other materials provided with the distribution.
  25:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  26:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  27:Src/main.c    ****  *      without specific prior written permission.
  28:Src/main.c    ****  *
  29:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  30:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  31:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  32:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 2


  33:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  35:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  36:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  37:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  38:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  39:Src/main.c    ****  *
  40:Src/main.c    ****  ******************************************************************************
  41:Src/main.c    ****  */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  44:Src/main.c    **** #include "main.h"
  45:Src/main.c    **** #include "stm32f0xx_hal.h"
  46:Src/main.c    **** void _Error_Handler(char *file, int line);
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE END Includes */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN PV */
  55:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PV */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  60:Src/main.c    **** void SystemClock_Config(void);
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PFP */
  63:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  64:Src/main.c    **** 
  65:Src/main.c    **** /* USER CODE END PFP */
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE BEGIN 0 */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END 0 */
  70:Src/main.c    **** 
  71:Src/main.c    **** void EXTI0_1_IRQHandler(void)
  72:Src/main.c    **** {
  27              		.loc 1 72 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  73:Src/main.c    ****   //Check if the interrupt was triggered by EXTI0
  74:Src/main.c    ****   if (EXTI->PR & (1 << 0))
  38              		.loc 1 74 3 view .LVU1
  39              		.loc 1 74 11 is_stmt 0 view .LVU2
  40 0002 104B     		ldr	r3, .L5
  41 0004 5B69     		ldr	r3, [r3, #20]
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 3


  42              		.loc 1 74 6 view .LVU3
  43 0006 DB07     		lsls	r3, r3, #31
  44 0008 00D4     		bmi	.L4
  45              	.L1:
  75:Src/main.c    ****   {
  76:Src/main.c    ****     // Flip PC8 and PC9
  77:Src/main.c    ****     GPIOC->ODR ^= (1 << 8); 
  78:Src/main.c    ****     GPIOC->ODR ^= (1 << 9);
  79:Src/main.c    ****     HAL_Delay(2000);
  80:Src/main.c    ****     //Toggle PC8 and PC9
  81:Src/main.c    ****     GPIOC->ODR ^= (1 << 8);
  82:Src/main.c    ****     GPIOC->ODR ^= (1 << 9);
  83:Src/main.c    ****     //Clear the interrupt
  84:Src/main.c    ****     EXTI->PR |= (1 << 0);
  85:Src/main.c    ****   }
  86:Src/main.c    **** }
  46              		.loc 1 86 1 view .LVU4
  47              		@ sp needed
  48 000a 70BD     		pop	{r4, r5, r6, pc}
  49              	.L4:
  77:Src/main.c    ****     GPIOC->ODR ^= (1 << 9);
  50              		.loc 1 77 5 is_stmt 1 view .LVU5
  77:Src/main.c    ****     GPIOC->ODR ^= (1 << 9);
  51              		.loc 1 77 10 is_stmt 0 view .LVU6
  52 000c 0E4C     		ldr	r4, .L5+4
  53 000e 6369     		ldr	r3, [r4, #20]
  77:Src/main.c    ****     GPIOC->ODR ^= (1 << 9);
  54              		.loc 1 77 16 view .LVU7
  55 0010 8026     		movs	r6, #128
  56 0012 7600     		lsls	r6, r6, #1
  57 0014 7340     		eors	r3, r6
  58 0016 6361     		str	r3, [r4, #20]
  78:Src/main.c    ****     HAL_Delay(2000);
  59              		.loc 1 78 5 is_stmt 1 view .LVU8
  78:Src/main.c    ****     HAL_Delay(2000);
  60              		.loc 1 78 10 is_stmt 0 view .LVU9
  61 0018 6369     		ldr	r3, [r4, #20]
  78:Src/main.c    ****     HAL_Delay(2000);
  62              		.loc 1 78 16 view .LVU10
  63 001a 8025     		movs	r5, #128
  64 001c AD00     		lsls	r5, r5, #2
  65 001e 6B40     		eors	r3, r5
  66 0020 6361     		str	r3, [r4, #20]
  79:Src/main.c    ****     //Toggle PC8 and PC9
  67              		.loc 1 79 5 is_stmt 1 view .LVU11
  68 0022 FA20     		movs	r0, #250
  69 0024 C000     		lsls	r0, r0, #3
  70 0026 FFF7FEFF 		bl	HAL_Delay
  71              	.LVL0:
  81:Src/main.c    ****     GPIOC->ODR ^= (1 << 9);
  72              		.loc 1 81 5 view .LVU12
  81:Src/main.c    ****     GPIOC->ODR ^= (1 << 9);
  73              		.loc 1 81 10 is_stmt 0 view .LVU13
  74 002a 6369     		ldr	r3, [r4, #20]
  81:Src/main.c    ****     GPIOC->ODR ^= (1 << 9);
  75              		.loc 1 81 16 view .LVU14
  76 002c 5E40     		eors	r6, r3
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 4


  77 002e 6661     		str	r6, [r4, #20]
  82:Src/main.c    ****     //Clear the interrupt
  78              		.loc 1 82 5 is_stmt 1 view .LVU15
  82:Src/main.c    ****     //Clear the interrupt
  79              		.loc 1 82 10 is_stmt 0 view .LVU16
  80 0030 6369     		ldr	r3, [r4, #20]
  82:Src/main.c    ****     //Clear the interrupt
  81              		.loc 1 82 16 view .LVU17
  82 0032 5D40     		eors	r5, r3
  83 0034 6561     		str	r5, [r4, #20]
  84:Src/main.c    ****   }
  84              		.loc 1 84 5 is_stmt 1 view .LVU18
  84:Src/main.c    ****   }
  85              		.loc 1 84 9 is_stmt 0 view .LVU19
  86 0036 034A     		ldr	r2, .L5
  87 0038 5369     		ldr	r3, [r2, #20]
  84:Src/main.c    ****   }
  88              		.loc 1 84 14 view .LVU20
  89 003a 0121     		movs	r1, #1
  90 003c 0B43     		orrs	r3, r1
  91 003e 5361     		str	r3, [r2, #20]
  92              		.loc 1 86 1 view .LVU21
  93 0040 E3E7     		b	.L1
  94              	.L6:
  95 0042 C046     		.align	2
  96              	.L5:
  97 0044 00040140 		.word	1073808384
  98 0048 00080048 		.word	1207961600
  99              		.cfi_endproc
 100              	.LFE40:
 102              		.section	.text._Error_Handler,"ax",%progbits
 103              		.align	1
 104              		.global	_Error_Handler
 105              		.syntax unified
 106              		.code	16
 107              		.thumb_func
 109              	_Error_Handler:
 110              	.LFB43:
  87:Src/main.c    **** 
  88:Src/main.c    **** int main(void)
  89:Src/main.c    **** {
  90:Src/main.c    ****   HAL_Init();
  91:Src/main.c    ****   SystemClock_Config(); // Configure the system clock
  92:Src/main.c    **** 
  93:Src/main.c    ****   // Enable the GPIOC clock
  94:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
  95:Src/main.c    ****   // Enable the GPIOA clock
  96:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
  97:Src/main.c    ****   // Enable the SYSCFG clock
  98:Src/main.c    ****   RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
  99:Src/main.c    **** 
 100:Src/main.c    ****   // Clear the bits for PC6, PC7, PC8 and PC9
 101:Src/main.c    ****   GPIOC->MODER &= ~(3 << 12);
 102:Src/main.c    ****   GPIOC->MODER &= ~(3 << 14);
 103:Src/main.c    ****   GPIOC->MODER &= ~(3 << 16);
 104:Src/main.c    ****   GPIOC->MODER &= ~(3 << 18);
 105:Src/main.c    ****   // Setting PC6, PC7, PC8 and PC9 to General-Purpose Output Mode
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 5


 106:Src/main.c    ****   GPIOC->MODER |= (1 << 12) | (1 << 14) | (1 << 16) | (1 << 18);
 107:Src/main.c    ****   // Setting PC6, PC7, PC8 and PC9 to Push-Pull Output Type
 108:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 6);
 109:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 7);
 110:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 8);
 111:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 9);
 112:Src/main.c    ****   // Set PC6, PC7, PC8 and PC9 to Low Speed
 113:Src/main.c    ****   GPIOC->OSPEEDR &= ~(0 << 12);
 114:Src/main.c    ****   GPIOC->OSPEEDR &= ~(0 << 14);
 115:Src/main.c    ****   GPIOC->OSPEEDR &= ~(0 << 16);
 116:Src/main.c    ****   GPIOC->OSPEEDR &= ~(0 << 18);
 117:Src/main.c    ****   // Clear the bits for PC6, PC7, PC8 and PC9
 118:Src/main.c    ****   // This also sets the pull-up/pull-down resistors to no pull-up/pull-down since the bits are 00
 119:Src/main.c    ****   GPIOC->PUPDR &= ~(3 << 12);
 120:Src/main.c    ****   GPIOC->PUPDR &= ~(3 << 14);
 121:Src/main.c    ****   GPIOC->PUPDR &= ~(3 << 16);
 122:Src/main.c    ****   GPIOC->PUPDR &= ~(3 << 18);
 123:Src/main.c    **** 
 124:Src/main.c    ****   // Setting PA0 to Digital Input Mode
 125:Src/main.c    ****   GPIOA->MODER &= ~(3 << 0);
 126:Src/main.c    ****   // Set PA0 to Low Speed
 127:Src/main.c    ****   GPIOA->OSPEEDR &= 0;
 128:Src/main.c    ****   // Set PA0 to Pull Down Resistor
 129:Src/main.c    ****   GPIOA->PUPDR |= (2 << 0);
 130:Src/main.c    **** 
 131:Src/main.c    ****   //Set EXTI0 to allow for interrupts
 132:Src/main.c    ****   EXTI->IMR |= (1 << 0);
 133:Src/main.c    **** 
 134:Src/main.c    ****   //Set EXTI0 to trigger on a rising edge
 135:Src/main.c    ****   EXTI->RTSR |= (1 << 0);
 136:Src/main.c    **** 
 137:Src/main.c    ****   //Set SYSCFG to allow for EXTI0
 138:Src/main.c    ****   SYSCFG->EXTICR[0] |= (0 << 0);
 139:Src/main.c    **** 
 140:Src/main.c    ****   //Enable the EXTI0 interrupt and set the priority to 1
 141:Src/main.c    ****   NVIC_EnableIRQ(EXTI0_1_IRQn);
 142:Src/main.c    ****   NVIC_SetPriority(EXTI0_1_IRQn, 1);
 143:Src/main.c    **** 
 144:Src/main.c    ****   NVIC_SetPriority(SysTick_IRQn, 2);
 145:Src/main.c    **** 
 146:Src/main.c    ****   //Set PC8 to High
 147:Src/main.c    ****   GPIOC->ODR |= (1 << 8);
 148:Src/main.c    ****   
 149:Src/main.c    ****   while (1)
 150:Src/main.c    ****   {
 151:Src/main.c    ****     HAL_Delay(500); // Delay for 500ms
 152:Src/main.c    ****     GPIOC->ODR ^= (1 << 6); // Toggle PC7
 153:Src/main.c    ****   }
 154:Src/main.c    **** }
 155:Src/main.c    **** 
 156:Src/main.c    **** /** System Clock Configuration
 157:Src/main.c    ****  */
 158:Src/main.c    **** void SystemClock_Config(void)
 159:Src/main.c    **** {
 160:Src/main.c    **** 
 161:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 162:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 6


 163:Src/main.c    **** 
 164:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks
 165:Src/main.c    ****    */
 166:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 167:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 168:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 169:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 170:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 171:Src/main.c    ****   {
 172:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 173:Src/main.c    ****   }
 174:Src/main.c    **** 
 175:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks
 176:Src/main.c    ****    */
 177:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 178:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 179:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 180:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 181:Src/main.c    **** 
 182:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 183:Src/main.c    ****   {
 184:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 185:Src/main.c    ****   }
 186:Src/main.c    **** 
 187:Src/main.c    ****   /**Configure the Systick interrupt time
 188:Src/main.c    ****    */
 189:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 190:Src/main.c    **** 
 191:Src/main.c    ****   /**Configure the Systick
 192:Src/main.c    ****    */
 193:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 194:Src/main.c    **** 
 195:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 196:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 197:Src/main.c    **** }
 198:Src/main.c    **** 
 199:Src/main.c    **** /* USER CODE BEGIN 4 */
 200:Src/main.c    **** 
 201:Src/main.c    **** /* USER CODE END 4 */
 202:Src/main.c    **** 
 203:Src/main.c    **** /**
 204:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 205:Src/main.c    ****  * @param  None
 206:Src/main.c    ****  * @retval None
 207:Src/main.c    ****  */
 208:Src/main.c    **** void _Error_Handler(char *file, int line)
 209:Src/main.c    **** {
 111              		.loc 1 209 1 is_stmt 1 view -0
 112              		.cfi_startproc
 113              		@ Volatile: function does not return.
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117              	.LVL1:
 118              	.L8:
 210:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 211:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 7


 212:Src/main.c    ****   while (1)
 119              		.loc 1 212 3 view .LVU23
 213:Src/main.c    ****   {
 214:Src/main.c    ****   }
 120              		.loc 1 214 3 view .LVU24
 212:Src/main.c    ****   {
 121              		.loc 1 212 9 view .LVU25
 122 0000 FEE7     		b	.L8
 123              		.cfi_endproc
 124              	.LFE43:
 126              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
 127              		.align	2
 128              	.LC0:
 129 0000 5372632F 		.ascii	"Src/main.c\000"
 129      6D61696E 
 129      2E6300
 130              		.global	__aeabi_uidiv
 131              		.section	.text.SystemClock_Config,"ax",%progbits
 132              		.align	1
 133              		.global	SystemClock_Config
 134              		.syntax unified
 135              		.code	16
 136              		.thumb_func
 138              	SystemClock_Config:
 139              	.LFB42:
 159:Src/main.c    **** 
 140              		.loc 1 159 1 view -0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 72
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144 0000 00B5     		push	{lr}
 145              	.LCFI1:
 146              		.cfi_def_cfa_offset 4
 147              		.cfi_offset 14, -4
 148 0002 93B0     		sub	sp, sp, #76
 149              	.LCFI2:
 150              		.cfi_def_cfa_offset 80
 161:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 151              		.loc 1 161 3 view .LVU27
 162:Src/main.c    **** 
 152              		.loc 1 162 3 view .LVU28
 166:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 153              		.loc 1 166 3 view .LVU29
 166:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 154              		.loc 1 166 36 is_stmt 0 view .LVU30
 155 0004 0223     		movs	r3, #2
 156 0006 0593     		str	r3, [sp, #20]
 167:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 157              		.loc 1 167 3 is_stmt 1 view .LVU31
 167:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 158              		.loc 1 167 30 is_stmt 0 view .LVU32
 159 0008 013B     		subs	r3, r3, #1
 160 000a 0893     		str	r3, [sp, #32]
 168:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 161              		.loc 1 168 3 is_stmt 1 view .LVU33
 168:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 162              		.loc 1 168 41 is_stmt 0 view .LVU34
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 8


 163 000c 0F33     		adds	r3, r3, #15
 164 000e 0993     		str	r3, [sp, #36]
 169:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 165              		.loc 1 169 3 is_stmt 1 view .LVU35
 169:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 166              		.loc 1 169 34 is_stmt 0 view .LVU36
 167 0010 0023     		movs	r3, #0
 168 0012 0E93     		str	r3, [sp, #56]
 170:Src/main.c    ****   {
 169              		.loc 1 170 3 is_stmt 1 view .LVU37
 170:Src/main.c    ****   {
 170              		.loc 1 170 7 is_stmt 0 view .LVU38
 171 0014 05A8     		add	r0, sp, #20
 172 0016 FFF7FEFF 		bl	HAL_RCC_OscConfig
 173              	.LVL2:
 170:Src/main.c    ****   {
 174              		.loc 1 170 6 discriminator 1 view .LVU39
 175 001a 0028     		cmp	r0, #0
 176 001c 1ED1     		bne	.L12
 177:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 177              		.loc 1 177 3 is_stmt 1 view .LVU40
 177:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 178              		.loc 1 177 31 is_stmt 0 view .LVU41
 179 001e 0723     		movs	r3, #7
 180 0020 0193     		str	r3, [sp, #4]
 178:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 181              		.loc 1 178 3 is_stmt 1 view .LVU42
 178:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 182              		.loc 1 178 34 is_stmt 0 view .LVU43
 183 0022 0023     		movs	r3, #0
 184 0024 0293     		str	r3, [sp, #8]
 179:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 185              		.loc 1 179 3 is_stmt 1 view .LVU44
 179:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 186              		.loc 1 179 35 is_stmt 0 view .LVU45
 187 0026 0393     		str	r3, [sp, #12]
 180:Src/main.c    **** 
 188              		.loc 1 180 3 is_stmt 1 view .LVU46
 180:Src/main.c    **** 
 189              		.loc 1 180 36 is_stmt 0 view .LVU47
 190 0028 0493     		str	r3, [sp, #16]
 182:Src/main.c    ****   {
 191              		.loc 1 182 3 is_stmt 1 view .LVU48
 182:Src/main.c    ****   {
 192              		.loc 1 182 7 is_stmt 0 view .LVU49
 193 002a 0021     		movs	r1, #0
 194 002c 01A8     		add	r0, sp, #4
 195 002e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 196              	.LVL3:
 182:Src/main.c    ****   {
 197              		.loc 1 182 6 discriminator 1 view .LVU50
 198 0032 0028     		cmp	r0, #0
 199 0034 16D1     		bne	.L13
 189:Src/main.c    **** 
 200              		.loc 1 189 3 is_stmt 1 view .LVU51
 189:Src/main.c    **** 
 201              		.loc 1 189 22 is_stmt 0 view .LVU52
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 9


 202 0036 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 203              	.LVL4:
 189:Src/main.c    **** 
 204              		.loc 1 189 3 discriminator 1 view .LVU53
 205 003a FA21     		movs	r1, #250
 206 003c 8900     		lsls	r1, r1, #2
 207 003e FFF7FEFF 		bl	__aeabi_uidiv
 208              	.LVL5:
 209 0042 FFF7FEFF 		bl	HAL_SYSTICK_Config
 210              	.LVL6:
 193:Src/main.c    **** 
 211              		.loc 1 193 3 is_stmt 1 view .LVU54
 212 0046 0420     		movs	r0, #4
 213 0048 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 214              	.LVL7:
 196:Src/main.c    **** }
 215              		.loc 1 196 3 view .LVU55
 216 004c 0120     		movs	r0, #1
 217 004e 0022     		movs	r2, #0
 218 0050 0021     		movs	r1, #0
 219 0052 4042     		rsbs	r0, r0, #0
 220 0054 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 221              	.LVL8:
 197:Src/main.c    **** 
 222              		.loc 1 197 1 is_stmt 0 view .LVU56
 223 0058 13B0     		add	sp, sp, #76
 224              		@ sp needed
 225 005a 00BD     		pop	{pc}
 226              	.L12:
 172:Src/main.c    ****   }
 227              		.loc 1 172 5 is_stmt 1 view .LVU57
 228 005c 0348     		ldr	r0, .L14
 229 005e AC21     		movs	r1, #172
 230 0060 FFF7FEFF 		bl	_Error_Handler
 231              	.LVL9:
 232              	.L13:
 184:Src/main.c    ****   }
 233              		.loc 1 184 5 view .LVU58
 234 0064 0148     		ldr	r0, .L14
 235 0066 B821     		movs	r1, #184
 236 0068 FFF7FEFF 		bl	_Error_Handler
 237              	.LVL10:
 238              	.L15:
 239              		.align	2
 240              	.L14:
 241 006c 00000000 		.word	.LC0
 242              		.cfi_endproc
 243              	.LFE42:
 245              		.section	.text.main,"ax",%progbits
 246              		.align	1
 247              		.global	main
 248              		.syntax unified
 249              		.code	16
 250              		.thumb_func
 252              	main:
 253              	.LFB41:
  89:Src/main.c    ****   HAL_Init();
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 10


 254              		.loc 1 89 1 view -0
 255              		.cfi_startproc
 256              		@ Volatile: function does not return.
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 260              	.LCFI3:
 261              		.cfi_def_cfa_offset 24
 262              		.cfi_offset 3, -24
 263              		.cfi_offset 4, -20
 264              		.cfi_offset 5, -16
 265              		.cfi_offset 6, -12
 266              		.cfi_offset 7, -8
 267              		.cfi_offset 14, -4
  90:Src/main.c    ****   SystemClock_Config(); // Configure the system clock
 268              		.loc 1 90 3 view .LVU60
 269 0002 FFF7FEFF 		bl	HAL_Init
 270              	.LVL11:
  91:Src/main.c    **** 
 271              		.loc 1 91 3 view .LVU61
 272 0006 FFF7FEFF 		bl	SystemClock_Config
 273              	.LVL12:
  94:Src/main.c    ****   // Enable the GPIOA clock
 274              		.loc 1 94 3 view .LVU62
  94:Src/main.c    ****   // Enable the GPIOA clock
 275              		.loc 1 94 6 is_stmt 0 view .LVU63
 276 000a 414B     		ldr	r3, .L18
 277 000c 5969     		ldr	r1, [r3, #20]
  94:Src/main.c    ****   // Enable the GPIOA clock
 278              		.loc 1 94 15 view .LVU64
 279 000e 8022     		movs	r2, #128
 280 0010 1203     		lsls	r2, r2, #12
 281 0012 0A43     		orrs	r2, r1
 282 0014 5A61     		str	r2, [r3, #20]
  96:Src/main.c    ****   // Enable the SYSCFG clock
 283              		.loc 1 96 3 is_stmt 1 view .LVU65
  96:Src/main.c    ****   // Enable the SYSCFG clock
 284              		.loc 1 96 6 is_stmt 0 view .LVU66
 285 0016 5969     		ldr	r1, [r3, #20]
  96:Src/main.c    ****   // Enable the SYSCFG clock
 286              		.loc 1 96 15 view .LVU67
 287 0018 8022     		movs	r2, #128
 288 001a 9202     		lsls	r2, r2, #10
 289 001c 0A43     		orrs	r2, r1
 290 001e 5A61     		str	r2, [r3, #20]
  98:Src/main.c    **** 
 291              		.loc 1 98 3 is_stmt 1 view .LVU68
  98:Src/main.c    **** 
 292              		.loc 1 98 6 is_stmt 0 view .LVU69
 293 0020 9A69     		ldr	r2, [r3, #24]
  98:Src/main.c    **** 
 294              		.loc 1 98 16 view .LVU70
 295 0022 0120     		movs	r0, #1
 296 0024 0243     		orrs	r2, r0
 297 0026 9A61     		str	r2, [r3, #24]
 101:Src/main.c    ****   GPIOC->MODER &= ~(3 << 14);
 298              		.loc 1 101 3 is_stmt 1 view .LVU71
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 11


 101:Src/main.c    ****   GPIOC->MODER &= ~(3 << 14);
 299              		.loc 1 101 8 is_stmt 0 view .LVU72
 300 0028 3A4B     		ldr	r3, .L18+4
 301 002a 1A68     		ldr	r2, [r3]
 101:Src/main.c    ****   GPIOC->MODER &= ~(3 << 14);
 302              		.loc 1 101 16 view .LVU73
 303 002c 3A4E     		ldr	r6, .L18+8
 304 002e 3240     		ands	r2, r6
 305 0030 1A60     		str	r2, [r3]
 102:Src/main.c    ****   GPIOC->MODER &= ~(3 << 16);
 306              		.loc 1 102 3 is_stmt 1 view .LVU74
 102:Src/main.c    ****   GPIOC->MODER &= ~(3 << 16);
 307              		.loc 1 102 8 is_stmt 0 view .LVU75
 308 0032 1A68     		ldr	r2, [r3]
 102:Src/main.c    ****   GPIOC->MODER &= ~(3 << 16);
 309              		.loc 1 102 16 view .LVU76
 310 0034 394D     		ldr	r5, .L18+12
 311 0036 2A40     		ands	r2, r5
 312 0038 1A60     		str	r2, [r3]
 103:Src/main.c    ****   GPIOC->MODER &= ~(3 << 18);
 313              		.loc 1 103 3 is_stmt 1 view .LVU77
 103:Src/main.c    ****   GPIOC->MODER &= ~(3 << 18);
 314              		.loc 1 103 8 is_stmt 0 view .LVU78
 315 003a 1A68     		ldr	r2, [r3]
 103:Src/main.c    ****   GPIOC->MODER &= ~(3 << 18);
 316              		.loc 1 103 16 view .LVU79
 317 003c 384C     		ldr	r4, .L18+16
 318 003e 2240     		ands	r2, r4
 319 0040 1A60     		str	r2, [r3]
 104:Src/main.c    ****   // Setting PC6, PC7, PC8 and PC9 to General-Purpose Output Mode
 320              		.loc 1 104 3 is_stmt 1 view .LVU80
 104:Src/main.c    ****   // Setting PC6, PC7, PC8 and PC9 to General-Purpose Output Mode
 321              		.loc 1 104 8 is_stmt 0 view .LVU81
 322 0042 1A68     		ldr	r2, [r3]
 104:Src/main.c    ****   // Setting PC6, PC7, PC8 and PC9 to General-Purpose Output Mode
 323              		.loc 1 104 16 view .LVU82
 324 0044 3749     		ldr	r1, .L18+20
 325 0046 0A40     		ands	r2, r1
 326 0048 1A60     		str	r2, [r3]
 106:Src/main.c    ****   // Setting PC6, PC7, PC8 and PC9 to Push-Pull Output Type
 327              		.loc 1 106 3 is_stmt 1 view .LVU83
 106:Src/main.c    ****   // Setting PC6, PC7, PC8 and PC9 to Push-Pull Output Type
 328              		.loc 1 106 8 is_stmt 0 view .LVU84
 329 004a 1F68     		ldr	r7, [r3]
 106:Src/main.c    ****   // Setting PC6, PC7, PC8 and PC9 to Push-Pull Output Type
 330              		.loc 1 106 16 view .LVU85
 331 004c AA22     		movs	r2, #170
 332 004e D202     		lsls	r2, r2, #11
 333 0050 3A43     		orrs	r2, r7
 334 0052 1A60     		str	r2, [r3]
 108:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 7);
 335              		.loc 1 108 3 is_stmt 1 view .LVU86
 108:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 7);
 336              		.loc 1 108 8 is_stmt 0 view .LVU87
 337 0054 5A68     		ldr	r2, [r3, #4]
 108:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 7);
 338              		.loc 1 108 17 view .LVU88
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 12


 339 0056 4027     		movs	r7, #64
 340 0058 BA43     		bics	r2, r7
 341 005a 5A60     		str	r2, [r3, #4]
 109:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 8);
 342              		.loc 1 109 3 is_stmt 1 view .LVU89
 109:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 8);
 343              		.loc 1 109 8 is_stmt 0 view .LVU90
 344 005c 5A68     		ldr	r2, [r3, #4]
 109:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 8);
 345              		.loc 1 109 17 view .LVU91
 346 005e 4037     		adds	r7, r7, #64
 347 0060 BA43     		bics	r2, r7
 348 0062 5A60     		str	r2, [r3, #4]
 110:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 9);
 349              		.loc 1 110 3 is_stmt 1 view .LVU92
 110:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 9);
 350              		.loc 1 110 8 is_stmt 0 view .LVU93
 351 0064 5A68     		ldr	r2, [r3, #4]
 110:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 9);
 352              		.loc 1 110 17 view .LVU94
 353 0066 304F     		ldr	r7, .L18+24
 354 0068 3A40     		ands	r2, r7
 355 006a 5A60     		str	r2, [r3, #4]
 111:Src/main.c    ****   // Set PC6, PC7, PC8 and PC9 to Low Speed
 356              		.loc 1 111 3 is_stmt 1 view .LVU95
 111:Src/main.c    ****   // Set PC6, PC7, PC8 and PC9 to Low Speed
 357              		.loc 1 111 8 is_stmt 0 view .LVU96
 358 006c 5A68     		ldr	r2, [r3, #4]
 111:Src/main.c    ****   // Set PC6, PC7, PC8 and PC9 to Low Speed
 359              		.loc 1 111 17 view .LVU97
 360 006e 2F4F     		ldr	r7, .L18+28
 361 0070 3A40     		ands	r2, r7
 362 0072 5A60     		str	r2, [r3, #4]
 113:Src/main.c    ****   GPIOC->OSPEEDR &= ~(0 << 14);
 363              		.loc 1 113 3 is_stmt 1 view .LVU98
 113:Src/main.c    ****   GPIOC->OSPEEDR &= ~(0 << 14);
 364              		.loc 1 113 8 is_stmt 0 view .LVU99
 365 0074 9A68     		ldr	r2, [r3, #8]
 113:Src/main.c    ****   GPIOC->OSPEEDR &= ~(0 << 14);
 366              		.loc 1 113 18 view .LVU100
 367 0076 9A60     		str	r2, [r3, #8]
 114:Src/main.c    ****   GPIOC->OSPEEDR &= ~(0 << 16);
 368              		.loc 1 114 3 is_stmt 1 view .LVU101
 114:Src/main.c    ****   GPIOC->OSPEEDR &= ~(0 << 16);
 369              		.loc 1 114 8 is_stmt 0 view .LVU102
 370 0078 9A68     		ldr	r2, [r3, #8]
 114:Src/main.c    ****   GPIOC->OSPEEDR &= ~(0 << 16);
 371              		.loc 1 114 18 view .LVU103
 372 007a 9A60     		str	r2, [r3, #8]
 115:Src/main.c    ****   GPIOC->OSPEEDR &= ~(0 << 18);
 373              		.loc 1 115 3 is_stmt 1 view .LVU104
 115:Src/main.c    ****   GPIOC->OSPEEDR &= ~(0 << 18);
 374              		.loc 1 115 8 is_stmt 0 view .LVU105
 375 007c 9A68     		ldr	r2, [r3, #8]
 115:Src/main.c    ****   GPIOC->OSPEEDR &= ~(0 << 18);
 376              		.loc 1 115 18 view .LVU106
 377 007e 9A60     		str	r2, [r3, #8]
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 13


 116:Src/main.c    ****   // Clear the bits for PC6, PC7, PC8 and PC9
 378              		.loc 1 116 3 is_stmt 1 view .LVU107
 116:Src/main.c    ****   // Clear the bits for PC6, PC7, PC8 and PC9
 379              		.loc 1 116 8 is_stmt 0 view .LVU108
 380 0080 9A68     		ldr	r2, [r3, #8]
 116:Src/main.c    ****   // Clear the bits for PC6, PC7, PC8 and PC9
 381              		.loc 1 116 18 view .LVU109
 382 0082 9A60     		str	r2, [r3, #8]
 119:Src/main.c    ****   GPIOC->PUPDR &= ~(3 << 14);
 383              		.loc 1 119 3 is_stmt 1 view .LVU110
 119:Src/main.c    ****   GPIOC->PUPDR &= ~(3 << 14);
 384              		.loc 1 119 8 is_stmt 0 view .LVU111
 385 0084 DA68     		ldr	r2, [r3, #12]
 119:Src/main.c    ****   GPIOC->PUPDR &= ~(3 << 14);
 386              		.loc 1 119 16 view .LVU112
 387 0086 3240     		ands	r2, r6
 388 0088 DA60     		str	r2, [r3, #12]
 120:Src/main.c    ****   GPIOC->PUPDR &= ~(3 << 16);
 389              		.loc 1 120 3 is_stmt 1 view .LVU113
 120:Src/main.c    ****   GPIOC->PUPDR &= ~(3 << 16);
 390              		.loc 1 120 8 is_stmt 0 view .LVU114
 391 008a DA68     		ldr	r2, [r3, #12]
 120:Src/main.c    ****   GPIOC->PUPDR &= ~(3 << 16);
 392              		.loc 1 120 16 view .LVU115
 393 008c 2A40     		ands	r2, r5
 394 008e DA60     		str	r2, [r3, #12]
 121:Src/main.c    ****   GPIOC->PUPDR &= ~(3 << 18);
 395              		.loc 1 121 3 is_stmt 1 view .LVU116
 121:Src/main.c    ****   GPIOC->PUPDR &= ~(3 << 18);
 396              		.loc 1 121 8 is_stmt 0 view .LVU117
 397 0090 DA68     		ldr	r2, [r3, #12]
 121:Src/main.c    ****   GPIOC->PUPDR &= ~(3 << 18);
 398              		.loc 1 121 16 view .LVU118
 399 0092 2240     		ands	r2, r4
 400 0094 DA60     		str	r2, [r3, #12]
 122:Src/main.c    **** 
 401              		.loc 1 122 3 is_stmt 1 view .LVU119
 122:Src/main.c    **** 
 402              		.loc 1 122 8 is_stmt 0 view .LVU120
 403 0096 DA68     		ldr	r2, [r3, #12]
 122:Src/main.c    **** 
 404              		.loc 1 122 16 view .LVU121
 405 0098 0A40     		ands	r2, r1
 406 009a DA60     		str	r2, [r3, #12]
 125:Src/main.c    ****   // Set PA0 to Low Speed
 407              		.loc 1 125 3 is_stmt 1 view .LVU122
 125:Src/main.c    ****   // Set PA0 to Low Speed
 408              		.loc 1 125 8 is_stmt 0 view .LVU123
 409 009c 9022     		movs	r2, #144
 410 009e D205     		lsls	r2, r2, #23
 411 00a0 1168     		ldr	r1, [r2]
 125:Src/main.c    ****   // Set PA0 to Low Speed
 412              		.loc 1 125 16 view .LVU124
 413 00a2 0324     		movs	r4, #3
 414 00a4 A143     		bics	r1, r4
 415 00a6 1160     		str	r1, [r2]
 127:Src/main.c    ****   // Set PA0 to Pull Down Resistor
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 14


 416              		.loc 1 127 3 is_stmt 1 view .LVU125
 127:Src/main.c    ****   // Set PA0 to Pull Down Resistor
 417              		.loc 1 127 8 is_stmt 0 view .LVU126
 418 00a8 9168     		ldr	r1, [r2, #8]
 127:Src/main.c    ****   // Set PA0 to Pull Down Resistor
 419              		.loc 1 127 18 view .LVU127
 420 00aa 0021     		movs	r1, #0
 421 00ac 9160     		str	r1, [r2, #8]
 129:Src/main.c    **** 
 422              		.loc 1 129 3 is_stmt 1 view .LVU128
 129:Src/main.c    **** 
 423              		.loc 1 129 8 is_stmt 0 view .LVU129
 424 00ae D168     		ldr	r1, [r2, #12]
 129:Src/main.c    **** 
 425              		.loc 1 129 16 view .LVU130
 426 00b0 013C     		subs	r4, r4, #1
 427 00b2 2143     		orrs	r1, r4
 428 00b4 D160     		str	r1, [r2, #12]
 132:Src/main.c    **** 
 429              		.loc 1 132 3 is_stmt 1 view .LVU131
 132:Src/main.c    **** 
 430              		.loc 1 132 7 is_stmt 0 view .LVU132
 431 00b6 1E4A     		ldr	r2, .L18+32
 432 00b8 1168     		ldr	r1, [r2]
 132:Src/main.c    **** 
 433              		.loc 1 132 13 view .LVU133
 434 00ba 0143     		orrs	r1, r0
 435 00bc 1160     		str	r1, [r2]
 135:Src/main.c    **** 
 436              		.loc 1 135 3 is_stmt 1 view .LVU134
 135:Src/main.c    **** 
 437              		.loc 1 135 7 is_stmt 0 view .LVU135
 438 00be 9168     		ldr	r1, [r2, #8]
 135:Src/main.c    **** 
 439              		.loc 1 135 14 view .LVU136
 440 00c0 0143     		orrs	r1, r0
 441 00c2 9160     		str	r1, [r2, #8]
 138:Src/main.c    **** 
 442              		.loc 1 138 3 is_stmt 1 view .LVU137
 138:Src/main.c    **** 
 443              		.loc 1 138 17 is_stmt 0 view .LVU138
 444 00c4 1B4A     		ldr	r2, .L18+36
 445 00c6 9168     		ldr	r1, [r2, #8]
 138:Src/main.c    **** 
 446              		.loc 1 138 21 view .LVU139
 447 00c8 9160     		str	r1, [r2, #8]
 141:Src/main.c    ****   NVIC_SetPriority(EXTI0_1_IRQn, 1);
 448              		.loc 1 141 3 is_stmt 1 view .LVU140
 449              	.LVL13:
 450              	.LBB8:
 451              	.LBI8:
 452              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 15


   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 16


  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 17


 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 18


 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 19


 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 20


 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 21


 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 22


 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 23


 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 24


 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 25


 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 453              		.loc 2 623 22 view .LVU141
 454              	.LBB9:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 455              		.loc 2 625 3 view .LVU142
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 456              		.loc 2 627 5 view .LVU143
 457              		.loc 2 627 20 is_stmt 0 view .LVU144
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 26


 458 00ca 1B4A     		ldr	r2, .L18+40
 459 00cc 2021     		movs	r1, #32
 460 00ce 1160     		str	r1, [r2]
 461              	.LVL14:
 462              		.loc 2 627 20 view .LVU145
 463              	.LBE9:
 464              	.LBE8:
 142:Src/main.c    **** 
 465              		.loc 1 142 3 is_stmt 1 view .LVU146
 466              	.LBB10:
 467              	.LBI10:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 27


 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 28


 468              		.loc 2 730 22 view .LVU147
 469              	.LBB11:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 470              		.loc 2 732 3 view .LVU148
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 471              		.loc 2 734 5 view .LVU149
 472              		.loc 2 734 52 is_stmt 0 view .LVU150
 473 00d0 C124     		movs	r4, #193
 474 00d2 A400     		lsls	r4, r4, #2
 475 00d4 1059     		ldr	r0, [r2, r4]
 476              		.loc 2 734 33 view .LVU151
 477 00d6 1949     		ldr	r1, .L18+44
 478 00d8 0840     		ands	r0, r1
 479              		.loc 2 734 102 view .LVU152
 480 00da 8021     		movs	r1, #128
 481 00dc C901     		lsls	r1, r1, #7
 482 00de 0143     		orrs	r1, r0
 483              		.loc 2 734 30 view .LVU153
 484 00e0 1151     		str	r1, [r2, r4]
 485              	.LVL15:
 486              		.loc 2 734 30 view .LVU154
 487              	.LBE11:
 488              	.LBE10:
 144:Src/main.c    **** 
 489              		.loc 1 144 3 is_stmt 1 view .LVU155
 490              	.LBB12:
 491              	.LBI12:
 730:Drivers/CMSIS/Include/core_cm0.h **** {
 492              		.loc 2 730 22 view .LVU156
 493              	.LBB13:
 732:Drivers/CMSIS/Include/core_cm0.h ****   {
 494              		.loc 2 732 3 view .LVU157
 735:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 736:Drivers/CMSIS/Include/core_cm0.h ****   }
 737:Drivers/CMSIS/Include/core_cm0.h ****   else
 738:Drivers/CMSIS/Include/core_cm0.h ****   {
 739:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 495              		.loc 2 739 5 view .LVU158
 496              		.loc 2 739 52 is_stmt 0 view .LVU159
 497 00e2 1748     		ldr	r0, .L18+48
 498 00e4 026A     		ldr	r2, [r0, #32]
 499              		.loc 2 739 33 view .LVU160
 500 00e6 1202     		lsls	r2, r2, #8
 501 00e8 120A     		lsrs	r2, r2, #8
 502              		.loc 2 739 102 view .LVU161
 503 00ea 8021     		movs	r1, #128
 504 00ec 0906     		lsls	r1, r1, #24
 505 00ee 0A43     		orrs	r2, r1
 506              		.loc 2 739 30 view .LVU162
 507 00f0 0262     		str	r2, [r0, #32]
 508              	.LVL16:
 509              		.loc 2 739 30 view .LVU163
 510              	.LBE13:
 511              	.LBE12:
 147:Src/main.c    ****   
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 29


 512              		.loc 1 147 3 is_stmt 1 view .LVU164
 147:Src/main.c    ****   
 513              		.loc 1 147 8 is_stmt 0 view .LVU165
 514 00f2 5969     		ldr	r1, [r3, #20]
 147:Src/main.c    ****   
 515              		.loc 1 147 14 view .LVU166
 516 00f4 8022     		movs	r2, #128
 517 00f6 5200     		lsls	r2, r2, #1
 518 00f8 0A43     		orrs	r2, r1
 519 00fa 5A61     		str	r2, [r3, #20]
 520              	.L17:
 149:Src/main.c    ****   {
 521              		.loc 1 149 3 is_stmt 1 view .LVU167
 151:Src/main.c    ****     GPIOC->ODR ^= (1 << 6); // Toggle PC7
 522              		.loc 1 151 5 view .LVU168
 523 00fc FA20     		movs	r0, #250
 524 00fe 4000     		lsls	r0, r0, #1
 525 0100 FFF7FEFF 		bl	HAL_Delay
 526              	.LVL17:
 152:Src/main.c    ****   }
 527              		.loc 1 152 5 discriminator 1 view .LVU169
 152:Src/main.c    ****   }
 528              		.loc 1 152 10 is_stmt 0 discriminator 1 view .LVU170
 529 0104 034A     		ldr	r2, .L18+4
 530 0106 5369     		ldr	r3, [r2, #20]
 152:Src/main.c    ****   }
 531              		.loc 1 152 16 discriminator 1 view .LVU171
 532 0108 4021     		movs	r1, #64
 533 010a 4B40     		eors	r3, r1
 534 010c 5361     		str	r3, [r2, #20]
 149:Src/main.c    ****   {
 535              		.loc 1 149 9 is_stmt 1 view .LVU172
 536 010e F5E7     		b	.L17
 537              	.L19:
 538              		.align	2
 539              	.L18:
 540 0110 00100240 		.word	1073876992
 541 0114 00080048 		.word	1207961600
 542 0118 FFCFFFFF 		.word	-12289
 543 011c FF3FFFFF 		.word	-49153
 544 0120 FFFFFCFF 		.word	-196609
 545 0124 FFFFF3FF 		.word	-786433
 546 0128 FFFEFFFF 		.word	-257
 547 012c FFFDFFFF 		.word	-513
 548 0130 00040140 		.word	1073808384
 549 0134 00000140 		.word	1073807360
 550 0138 00E100E0 		.word	-536813312
 551 013c FF00FFFF 		.word	-65281
 552 0140 00ED00E0 		.word	-536810240
 553              		.cfi_endproc
 554              	.LFE41:
 556              		.text
 557              	.Letext0:
 558              		.file 3 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 559              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 560              		.file 5 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 561              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 30


 562              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 563              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 564              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s 			page 31


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s:19     .text.EXTI0_1_IRQHandler:00000000 $t
/var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s:25     .text.EXTI0_1_IRQHandler:00000000 EXTI0_1_IRQHandler
/var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s:97     .text.EXTI0_1_IRQHandler:00000044 $d
/var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s:103    .text._Error_Handler:00000000 $t
/var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s:109    .text._Error_Handler:00000000 _Error_Handler
/var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s:127    .rodata.SystemClock_Config.str1.4:00000000 $d
/var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s:132    .text.SystemClock_Config:00000000 $t
/var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s:138    .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s:241    .text.SystemClock_Config:0000006c $d
/var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s:246    .text.main:00000000 $t
/var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s:252    .text.main:00000000 main
/var/folders/2t/dz2wf36n58l1r0cmb7nl3kb40000gq/T//ccCEQQOW.s:540    .text.main:00000110 $d

UNDEFINED SYMBOLS
HAL_Delay
__aeabi_uidiv
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
